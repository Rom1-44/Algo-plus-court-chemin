import numpy as np
import matplotlib.pyplot as plt
from math import sqrt

M=np.ones((15,15),dtype=int)
M[7:13,7]=0
M[7,2:8]=0

def plot(M:np.array)->None:
    """
    Affiche la matrice M
    - case blanche : point valide
    - case noire : mur
    """
    n, m = M.shape
    fig, ax = plt.subplots()
    ax.imshow(M, cmap='gray', vmin=0, vmax=1)
    ax.set_xticks(np.arange(0, m, 1))
    ax.set_yticks(np.arange(0, n, 1))
    ax.set_xticks(np.arange(-.5, m, 1), minor=True)
    ax.set_yticks(np.arange(-.5, n, 1), minor=True)
    ax.grid(color='grey', which='minor')


plot(M)

def dist(A:(int,int), B:(int,int))->[float]:
    xA,yA=A
    xB,yB=B
    return sqrt((xB-xA)**2+(yB-yA)**2)
                
def imin(f:[(int,int)],h:dict)->int:
    im=0
    m=h[f[0]]
    for i in range (1,len(f)):
        if h[f[i]]<m:
            im=i
            m=h[f[i]]
    return im

def valide(i:int,j:int,M:np.array)->bool:
    n,m=M.shape
    return 0<=i<n and 0<=j<n and M[i,j]!=0
    
               
def voisins(P:(int, int),M:np.array)->[(int,int)]:
    i,j=P
    return [(i+a,j+b) for a in (-1,0,1) for b in (-1,0,1) if(a,b)!=0 and valide(i+a,j+b,M)]
    
    
    
    
    
    
def init(M:np.array,S:(int,int),D:(int,int))->(dict,dict,dict,dict):
    n,m=M.shape
    d={(i,j):np.inf for i in range(n) for j in range(m)}
    h={(i,j):np.inf for i in range(n) for j in range(m)}
    pere={(i,j):-1 for i in range(n) for j in range(m)}
    traite={(i,j):False for i in range(n) for j in range(m)}
    d[S]=0
    h[S]=d[S]+dist(S,D)
    f=[S]
    return d,pere,h,traite,f

def a_etoile(M:np.array,S:(int,int),D:(int,int))->(dict,dict):
    d,pere,h,traite,f=init(M,S,D)
    while f!=[]:
        P=f.pop(imin(f,h))
        traite[P]=True
        if P==D:
            return d,pere
        else :
            for V in voisins(P,M):
                
                if not traite[V]:
                    
                    dV=d[P]+dist(P,V)
                    hV=dV+dist(V,D)
                    if V not in f:
                        
                        f.append(V)
                    if hV<h[V]:
                        
                        d[V]=dV
                        h[V]=hV
                        pere[V]=P
    return{},{}
print(a_etoile(M,(14,0),(0,14)))
       
def chemin(pere:dict,S:(int,int),D:(int,int))->[(int,int)]:
    ch=[]
    P=D
    while P!=0:
        ch.append(P)
        P=pere[P]
    ch.append(S)
    ch.reverse()
    return ch    
