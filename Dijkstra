import numpy as np

def imin(f:[int],d:[int])->int:
    im=0
    m=d[f[0]]
    for i in range (1,len(f)):
        if d[f[i]]<m:
            im=i
            m=d[f[i]]
    return im

def voisins (P:int,W)->[int]:
    return [i for i in range (len(W)) if W[P,i]!=-1]

W=np.ones((6,6),dtype=int)*(-1)
W[0,1]=4
W[0,2]=3
W[1,3]=5
W[2,4]=1
W[1,2]=4
W[3,4]=6
W[4,5]=2
W[3,5]=2
W[4,2]=1
  

def dijkstra(W  ,S:int)->[int]:
    n=len(W)
    d=[np.inf]*len(W)
    pere=[-1]*n
    traite=[False]*n
    f=[S]
    d[S]=0
    while f!=[]:
        im=imin(f,d)
        P=f.pop(im)
        traite[P]=True
        for V in voisins(P,W):
            if not traite[V]:
                if V not in f:
                    d[V]=d[P]+W[P,V]
                    pere[V]=P
                    f.append(V)
                elif d[V]>d[P]+W[P,V]:
                    d[V]=d[P]+W[P,V]
                    pere[V]=P
    return d,pere
    
print(dijkstra(W,0)) 
